/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.jid.metajava;

import static java.nio.charset.StandardCharsets.UTF_8;

import com.sun.source.tree.ClassTree;
import com.sun.source.tree.CompilationUnitTree;
import com.sun.source.tree.ExpressionTree;
import com.sun.source.tree.ImportTree;
import com.sun.source.tree.MethodTree;
import com.sun.source.tree.Tree;
import com.sun.source.util.JavacTask;
import com.sun.source.util.SimpleTreeVisitor;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import org.jid.metajava.model.AnnotationMeta;
import org.jid.metajava.model.ClassMeta;
import org.jid.metajava.model.ImportMeta;
import org.jid.metajava.model.MethodMeta;

public class MetaJava {

    public Set<ClassMeta> getMetaFromFiles(Collection<File> files) throws IOException {
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, UTF_8);
        Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(files);

        // "-proc:full" compiler option needed to be able to process annotations
        JavacTask javacTask =
          (JavacTask) compiler.getTask(null, fileManager, null, List.of("-proc:full"), null, compilationUnits);
        Iterable<? extends CompilationUnitTree> compilationUnitTrees = javacTask.parse();

        Set<ClassMeta> classes = new HashSet<>();
        for (CompilationUnitTree compilationUnitTree : compilationUnitTrees) {
            String packageName = compilationUnitTree.getPackage().getPackageName().toString();
            String sourceFile = compilationUnitTree.getSourceFile().toUri().toString();
            List<ImportMeta> imports = compilationUnitTree.getImports().stream().map(this::parseImport).toList();
            for (Tree tree : compilationUnitTree.getTypeDecls()) {
                tree.accept(new SimpleTreeVisitor() {
                    @Override
                    public Object visitClass(ClassTree classTree, Object o) {
                        var methods = new HashSet<MethodMeta>();
                        classTree.getMembers().forEach(member -> {
                            member.accept(new SimpleTreeVisitor<>() {
                                @Override
                                public Object visitMethod(MethodTree methodTree, Object o) {
                                    var annotations = new HashSet<AnnotationMeta>();
                                    methodTree.getModifiers().getAnnotations()
                                      .forEach(annotationTree -> {
                                          Set<String> args = annotationTree.getArguments().stream().map(ExpressionTree::toString).collect(Collectors.toSet());
                                          annotations.add(new AnnotationMeta(annotationTree.getAnnotationType().toString(), args));
                                      });
                                    methods.add(new MethodMeta(methodTree.getName().toString(), annotations));
                                    return null;
                                }
                            }, null);
                        });
                        classes.add(new ClassMeta(classTree.getSimpleName().toString(), methods, packageName, sourceFile, imports));
                        return null;
                    }
                }, null);

            }
        }
        return classes;
    }

    private ImportMeta parseImport(ImportTree importTree) {
        boolean isStatic = importTree.isStatic();
        int length = "import ".length();
        if(isStatic) {
            length += "static ".length();
        }
        var importName = importTree.toString().substring(length).replace(";", "").trim();
        return new ImportMeta(importName, isStatic);
    }

}
